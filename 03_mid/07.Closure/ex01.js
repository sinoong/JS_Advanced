/**
 * 4. 클로저
 * 4-1. 클로저란 무엇인가?
 * - 어떤 함수의 내부 중첩 함수는 클로저 스코프를 생성한다.(상위 스코프의 변수를 참조할 때만)
 * - 이 클로저 스코프를 가지고 있는 함수를 자바스크립트에서 클로저라고 한다.
 * - 클로저 스코프는 내부 중첩 함수의 외부 렉시컬 스코프를 참조하고 있다.
 * - strong 포인터로 잡아 놓기 때문에 해당 외부 함수의 렉시컬 환경이 가비지 컬렉션 되지 않는다.
 * - 그래서 클로저는 외부 함수를 벗어나(외부 함수에서 다시 외부로 반환된 후 어떤 변수에 할당 되어) 
 * - 사용할 수 있다.
 * - 클로저가 외부 함수의 데이터(변수나 함수)를 참조하고 있다면 클로저 스코프에 기록(캡쳐)된다.
 * - 이 때 특이한 점은 자바스크립트 엔진이 메모리를 아끼기 위해서
 * - 클로저가 참조하는 데이터만 클로저 스코프에 캡쳐를 한다.
 * - 그래서 외부 함수에 변수 a, b가 있고 내부 중첩 함수에서 a 만 사용한다면
 * - 클로저 스코프에서는 a만 캡쳐된다.
 * - 그래서 외부 함수가 종료되면 b는 가비지 컬렉션 된다.
 * - 따라서 정확히 말하면 외부 함수가 종료되면 외부 함수의 렉시컬 환경은 가비지 컬렉션 된다.
 * - 하지만 클로저가 참조하는 변수 a는 클로저 스코프에 캡쳐되어 가비지 컬렉션 되지 않고 살아 있게 된다.
 * - 따라서 클로저와 함께 원래 선언된 위치였던 외부 함수의 스코프를 벗어나 자유를 얻어 살고 있기 때문에 
 * - "자유롭다" 라고 할 수 있다.
 * - 그리고 외부 함수를 벗어나 클로저와 함께 사용되는 변수는 다른 외부 공간에서도 "자유롭게" 접근 가능하고
 * - 변경하다.
 * - 이런 이유로 클로저가 캡쳐하는 변수를 자유 변수라고 한다.
 * - 즉,
 * - 1. 원래 선언된 위치의 스코프를 벗어나 자유로운 변수
 * - 2. 원래 선언된 위치가 아닌 다른 곳에서 자유롭게 변경이 가능한 변수
 */

/**
 * 클로저를 만드는 방법
 * inner 함수는 outer 함수 내부에 정의되어 outer 스코프를 참조하는 Closure 스코프를 갖게 된다.
 * inner 함수가 클로저 스코프를 가지고 있으므로 inner 함수는 클로저가 된다.
 * inner 함수에서 inner 함수 객체로 name 속성에 접근하고 있으므로 
 * outer closure 스코프에 inner 함수의 함수 객체 참조를 캡쳐 해 놓는다.
 */
{
    function outer() {
        function inner() {
            console.log(inner.name);
        }
        inner();
    }

    outer();
}

/**
 * 실제로 외부 스코프의 값을 사용하지 않으면 클로저 스코프를 만들지 않는다.
 * 따라서 inner 함수는 중첩 함수가 된다.
 */
{
    function outer() {
        function inner() {
            console.log('inner');
        }
        inner();
    }

    outer();
}
